
part1c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000068a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000636  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000068a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c6  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000762  00000000  00000000  00001012  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d0  00000000  00000000  00001774  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001b44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003da  00000000  00000000  00001c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000225  00000000  00000000  00001ffe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002223  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__vector_13>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  78:	0c 94 19 03 	jmp	0x632	; 0x632 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <usart_init>:
}


void usart_init (void)
{
	UCSR0B = (1<<TXEN0);
  80:	88 e0       	ldi	r24, 0x08	; 8
  82:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1<< UCSZ01)|(1<<UCSZ00);
  86:	86 e0       	ldi	r24, 0x06	; 6
  88:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = F_CPU/16/BAUD_RATE-1;
  8c:	87 e6       	ldi	r24, 0x67	; 103
  8e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  92:	08 95       	ret

00000094 <adc_init>:


void adc_init (void)
{
	//enable and setup adc
	ADMUX = (0<<REFS1)|			// Reference Selection Bits
  94:	85 e4       	ldi	r24, 0x45	; 69
  96:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	(1<<REFS0)|					// AVcc - external cap at AREF
	(0<<ADLAR)|					// ADC Left Adjust Result
	(1<<MUX2)|					// Analog Channel Selection Bits
	(0<<MUX1)|					// ADC4 (PC4 PIN27)
	(1<<MUX0);
	ADCSRA = (1<<ADEN)|			// ADC Enable
  9a:	85 e8       	ldi	r24, 0x85	; 133
  9c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  a0:	08 95       	ret

000000a2 <timer_init>:
}


void timer_init (void)
{
	TCCR1B |= 5;			//set prescaler to 1024
  a2:	e1 e8       	ldi	r30, 0x81	; 129
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	85 60       	ori	r24, 0x05	; 5
  aa:	80 83       	st	Z, r24
	TIMSK1 = (1 << TOIE1);	//enable overflow flag
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	TCNT1 = 49911;			//1 second delay is (0xFFFF)-TCNT=65535-15624=49911
  b2:	87 ef       	ldi	r24, 0xF7	; 247
  b4:	92 ec       	ldi	r25, 0xC2	; 194
  b6:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  ba:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	sei();
  be:	78 94       	sei
  c0:	08 95       	ret

000000c2 <usart_send>:
}


void usart_send (unsigned char ch)
{
	while (! (UCSR0A & (1<<UDRE0))); 	//wait until UDR0 is zero
  c2:	e0 ec       	ldi	r30, 0xC0	; 192
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	90 81       	ld	r25, Z
  c8:	95 ff       	sbrs	r25, 5
  ca:	fd cf       	rjmp	.-6      	; 0xc6 <usart_send+0x4>
	UDR0 = ch;							//transmit ch
  cc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  d0:	08 95       	ret

000000d2 <main>:
void adc_init ();
void usart_send (unsigned char ch);

int main (void)
{
	timer_init ();
  d2:	0e 94 51 00 	call	0xa2	; 0xa2 <timer_init>
	usart_init ();
  d6:	0e 94 40 00 	call	0x80	; 0x80 <usart_init>
	adc_init ();
  da:	0e 94 4a 00 	call	0x94	; 0x94 <adc_init>
	
	while (1)
	{
		ADCSRA|=(1<<ADSC);
  de:	ca e7       	ldi	r28, 0x7A	; 122
  e0:	d0 e0       	ldi	r29, 0x00	; 0
		while((ADCSRA&(1<<ADIF))==0);	//finish conversion		
		ADCSRA |= (1<<ADIF);
		
		int a = ADCL;
  e2:	0f 2e       	mov	r0, r31
  e4:	f8 e7       	ldi	r31, 0x78	; 120
  e6:	8f 2e       	mov	r8, r31
  e8:	91 2c       	mov	r9, r1
  ea:	f0 2d       	mov	r31, r0
		a = a | (ADCH<<8);
  ec:	0f 2e       	mov	r0, r31
  ee:	f9 e7       	ldi	r31, 0x79	; 121
  f0:	af 2e       	mov	r10, r31
  f2:	b1 2c       	mov	r11, r1
  f4:	f0 2d       	mov	r31, r0
		a = (a/1024.0) * 5000/10;
		usart_send((a/100)+'0');
  f6:	0f 2e       	mov	r0, r31
  f8:	f4 e6       	ldi	r31, 0x64	; 100
  fa:	cf 2e       	mov	r12, r31
  fc:	d1 2c       	mov	r13, r1
  fe:	f0 2d       	mov	r31, r0
		
		a = a % 100;
		usart_send((a/10)+'0');
 100:	0f 2e       	mov	r0, r31
 102:	fa e0       	ldi	r31, 0x0A	; 10
 104:	ef 2e       	mov	r14, r31
 106:	f1 2c       	mov	r15, r1
 108:	f0 2d       	mov	r31, r0
	usart_init ();
	adc_init ();
	
	while (1)
	{
		ADCSRA|=(1<<ADSC);
 10a:	88 81       	ld	r24, Y
 10c:	80 64       	ori	r24, 0x40	; 64
 10e:	88 83       	st	Y, r24
		while((ADCSRA&(1<<ADIF))==0);	//finish conversion		
 110:	88 81       	ld	r24, Y
 112:	84 ff       	sbrs	r24, 4
 114:	fd cf       	rjmp	.-6      	; 0x110 <main+0x3e>
		ADCSRA |= (1<<ADIF);
 116:	88 81       	ld	r24, Y
 118:	80 61       	ori	r24, 0x10	; 16
 11a:	88 83       	st	Y, r24
		
		int a = ADCL;
 11c:	f4 01       	movw	r30, r8
 11e:	60 81       	ld	r22, Z
		a = a | (ADCH<<8);
 120:	f5 01       	movw	r30, r10
 122:	80 81       	ld	r24, Z
		a = (a/1024.0) * 5000/10;
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	78 2b       	or	r23, r24
 128:	07 2e       	mov	r0, r23
 12a:	00 0c       	add	r0, r0
 12c:	88 0b       	sbc	r24, r24
 12e:	99 0b       	sbc	r25, r25
 130:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__floatsisf>
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	40 e8       	ldi	r20, 0x80	; 128
 13a:	5a e3       	ldi	r21, 0x3A	; 58
 13c:	0e 94 84 02 	call	0x508	; 0x508 <__mulsf3>
 140:	20 e0       	ldi	r18, 0x00	; 0
 142:	30 e4       	ldi	r19, 0x40	; 64
 144:	4c e9       	ldi	r20, 0x9C	; 156
 146:	55 e4       	ldi	r21, 0x45	; 69
 148:	0e 94 84 02 	call	0x508	; 0x508 <__mulsf3>
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	40 e2       	ldi	r20, 0x20	; 32
 152:	51 e4       	ldi	r21, 0x41	; 65
 154:	0e 94 4e 01 	call	0x29c	; 0x29c <__divsf3>
 158:	0e 94 c0 01 	call	0x380	; 0x380 <__fixsfsi>
		usart_send((a/100)+'0');
 15c:	cb 01       	movw	r24, r22
 15e:	b6 01       	movw	r22, r12
 160:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__divmodhi4>
 164:	8c 01       	movw	r16, r24
 166:	80 e3       	ldi	r24, 0x30	; 48
 168:	86 0f       	add	r24, r22
 16a:	0e 94 61 00 	call	0xc2	; 0xc2 <usart_send>
		
		a = a % 100;
		usart_send((a/10)+'0');
 16e:	c8 01       	movw	r24, r16
 170:	b7 01       	movw	r22, r14
 172:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__divmodhi4>
 176:	18 2f       	mov	r17, r24
 178:	80 e3       	ldi	r24, 0x30	; 48
 17a:	86 0f       	add	r24, r22
 17c:	0e 94 61 00 	call	0xc2	; 0xc2 <usart_send>
		
		a = a % 10;
		usart_send((a)+'0');
 180:	80 e3       	ldi	r24, 0x30	; 48
 182:	81 0f       	add	r24, r17
 184:	0e 94 61 00 	call	0xc2	; 0xc2 <usart_send>
		usart_send('\r');
 188:	8d e0       	ldi	r24, 0x0D	; 13
 18a:	0e 94 61 00 	call	0xc2	; 0xc2 <usart_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18e:	ff ef       	ldi	r31, 0xFF	; 255
 190:	21 ee       	ldi	r18, 0xE1	; 225
 192:	84 e0       	ldi	r24, 0x04	; 4
 194:	f1 50       	subi	r31, 0x01	; 1
 196:	20 40       	sbci	r18, 0x00	; 0
 198:	80 40       	sbci	r24, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <main+0xc2>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0xcc>
 19e:	00 00       	nop
 1a0:	b4 cf       	rjmp	.-152    	; 0x10a <main+0x38>

000001a2 <__vector_13>:
	return 0;
}


ISR (TIMER1_OVF_vect)
{
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	2f 93       	push	r18
 1ae:	3f 93       	push	r19
 1b0:	4f 93       	push	r20
 1b2:	5f 93       	push	r21
 1b4:	6f 93       	push	r22
 1b6:	7f 93       	push	r23
 1b8:	8f 93       	push	r24
 1ba:	9f 93       	push	r25
 1bc:	af 93       	push	r26
 1be:	bf 93       	push	r27
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	ef 93       	push	r30
 1c6:	ff 93       	push	r31
	ADCSRA|=(1<<ADSC);
 1c8:	ea e7       	ldi	r30, 0x7A	; 122
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	80 64       	ori	r24, 0x40	; 64
 1d0:	80 83       	st	Z, r24
	while((ADCSRA&(1<<ADIF))==0);	//finish conversion	
 1d2:	80 81       	ld	r24, Z
 1d4:	84 ff       	sbrs	r24, 4
 1d6:	fd cf       	rjmp	.-6      	; 0x1d2 <__vector_13+0x30>
	ADCSRA |= (1<<ADIF);
 1d8:	ea e7       	ldi	r30, 0x7A	; 122
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	80 61       	ori	r24, 0x10	; 16
 1e0:	80 83       	st	Z, r24
	
	int a = ADCL;
 1e2:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	a = a | (ADCH<<8);
 1e6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	a = (a/1024.0) * 5000/10;
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	78 2b       	or	r23, r24
 1ee:	07 2e       	mov	r0, r23
 1f0:	00 0c       	add	r0, r0
 1f2:	88 0b       	sbc	r24, r24
 1f4:	99 0b       	sbc	r25, r25
 1f6:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__floatsisf>
 1fa:	20 e0       	ldi	r18, 0x00	; 0
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	40 e8       	ldi	r20, 0x80	; 128
 200:	5a e3       	ldi	r21, 0x3A	; 58
 202:	0e 94 84 02 	call	0x508	; 0x508 <__mulsf3>
 206:	20 e0       	ldi	r18, 0x00	; 0
 208:	30 e4       	ldi	r19, 0x40	; 64
 20a:	4c e9       	ldi	r20, 0x9C	; 156
 20c:	55 e4       	ldi	r21, 0x45	; 69
 20e:	0e 94 84 02 	call	0x508	; 0x508 <__mulsf3>
 212:	20 e0       	ldi	r18, 0x00	; 0
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	40 e2       	ldi	r20, 0x20	; 32
 218:	51 e4       	ldi	r21, 0x41	; 65
 21a:	0e 94 4e 01 	call	0x29c	; 0x29c <__divsf3>
 21e:	0e 94 c0 01 	call	0x380	; 0x380 <__fixsfsi>
	usart_send((a/100)+'0');
 222:	cb 01       	movw	r24, r22
 224:	64 e6       	ldi	r22, 0x64	; 100
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__divmodhi4>
 22c:	ec 01       	movw	r28, r24
 22e:	80 e3       	ldi	r24, 0x30	; 48
 230:	86 0f       	add	r24, r22
 232:	0e 94 61 00 	call	0xc2	; 0xc2 <usart_send>
	
	a = a % 100;
	usart_send((a/10)+'0');
 236:	ce 01       	movw	r24, r28
 238:	6a e0       	ldi	r22, 0x0A	; 10
 23a:	70 e0       	ldi	r23, 0x00	; 0
 23c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__divmodhi4>
 240:	c8 2f       	mov	r28, r24
 242:	80 e3       	ldi	r24, 0x30	; 48
 244:	86 0f       	add	r24, r22
 246:	0e 94 61 00 	call	0xc2	; 0xc2 <usart_send>
	
	a = a % 10;
	usart_send((a)+'0');
 24a:	80 e3       	ldi	r24, 0x30	; 48
 24c:	8c 0f       	add	r24, r28
 24e:	0e 94 61 00 	call	0xc2	; 0xc2 <usart_send>
	usart_send('\r');
 252:	8d e0       	ldi	r24, 0x0D	; 13
 254:	0e 94 61 00 	call	0xc2	; 0xc2 <usart_send>
 258:	2f ef       	ldi	r18, 0xFF	; 255
 25a:	81 ee       	ldi	r24, 0xE1	; 225
 25c:	94 e0       	ldi	r25, 0x04	; 4
 25e:	21 50       	subi	r18, 0x01	; 1
 260:	80 40       	sbci	r24, 0x00	; 0
 262:	90 40       	sbci	r25, 0x00	; 0
 264:	e1 f7       	brne	.-8      	; 0x25e <__vector_13+0xbc>
 266:	00 c0       	rjmp	.+0      	; 0x268 <__vector_13+0xc6>
 268:	00 00       	nop
	
	_delay_ms(100);
	TCNT1 = 49911;					//reset timer
 26a:	87 ef       	ldi	r24, 0xF7	; 247
 26c:	92 ec       	ldi	r25, 0xC2	; 194
 26e:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 272:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
}
 276:	ff 91       	pop	r31
 278:	ef 91       	pop	r30
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	bf 91       	pop	r27
 280:	af 91       	pop	r26
 282:	9f 91       	pop	r25
 284:	8f 91       	pop	r24
 286:	7f 91       	pop	r23
 288:	6f 91       	pop	r22
 28a:	5f 91       	pop	r21
 28c:	4f 91       	pop	r20
 28e:	3f 91       	pop	r19
 290:	2f 91       	pop	r18
 292:	0f 90       	pop	r0
 294:	0f be       	out	0x3f, r0	; 63
 296:	0f 90       	pop	r0
 298:	1f 90       	pop	r1
 29a:	18 95       	reti

0000029c <__divsf3>:
 29c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <__divsf3x>
 2a0:	0c 94 4a 02 	jmp	0x494	; 0x494 <__fp_round>
 2a4:	0e 94 43 02 	call	0x486	; 0x486 <__fp_pscB>
 2a8:	58 f0       	brcs	.+22     	; 0x2c0 <__divsf3+0x24>
 2aa:	0e 94 3c 02 	call	0x478	; 0x478 <__fp_pscA>
 2ae:	40 f0       	brcs	.+16     	; 0x2c0 <__divsf3+0x24>
 2b0:	29 f4       	brne	.+10     	; 0x2bc <__divsf3+0x20>
 2b2:	5f 3f       	cpi	r21, 0xFF	; 255
 2b4:	29 f0       	breq	.+10     	; 0x2c0 <__divsf3+0x24>
 2b6:	0c 94 33 02 	jmp	0x466	; 0x466 <__fp_inf>
 2ba:	51 11       	cpse	r21, r1
 2bc:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__fp_szero>
 2c0:	0c 94 39 02 	jmp	0x472	; 0x472 <__fp_nan>

000002c4 <__divsf3x>:
 2c4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__fp_split3>
 2c8:	68 f3       	brcs	.-38     	; 0x2a4 <__divsf3+0x8>

000002ca <__divsf3_pse>:
 2ca:	99 23       	and	r25, r25
 2cc:	b1 f3       	breq	.-20     	; 0x2ba <__divsf3+0x1e>
 2ce:	55 23       	and	r21, r21
 2d0:	91 f3       	breq	.-28     	; 0x2b6 <__divsf3+0x1a>
 2d2:	95 1b       	sub	r25, r21
 2d4:	55 0b       	sbc	r21, r21
 2d6:	bb 27       	eor	r27, r27
 2d8:	aa 27       	eor	r26, r26
 2da:	62 17       	cp	r22, r18
 2dc:	73 07       	cpc	r23, r19
 2de:	84 07       	cpc	r24, r20
 2e0:	38 f0       	brcs	.+14     	; 0x2f0 <__divsf3_pse+0x26>
 2e2:	9f 5f       	subi	r25, 0xFF	; 255
 2e4:	5f 4f       	sbci	r21, 0xFF	; 255
 2e6:	22 0f       	add	r18, r18
 2e8:	33 1f       	adc	r19, r19
 2ea:	44 1f       	adc	r20, r20
 2ec:	aa 1f       	adc	r26, r26
 2ee:	a9 f3       	breq	.-22     	; 0x2da <__divsf3_pse+0x10>
 2f0:	35 d0       	rcall	.+106    	; 0x35c <__divsf3_pse+0x92>
 2f2:	0e 2e       	mov	r0, r30
 2f4:	3a f0       	brmi	.+14     	; 0x304 <__divsf3_pse+0x3a>
 2f6:	e0 e8       	ldi	r30, 0x80	; 128
 2f8:	32 d0       	rcall	.+100    	; 0x35e <__divsf3_pse+0x94>
 2fa:	91 50       	subi	r25, 0x01	; 1
 2fc:	50 40       	sbci	r21, 0x00	; 0
 2fe:	e6 95       	lsr	r30
 300:	00 1c       	adc	r0, r0
 302:	ca f7       	brpl	.-14     	; 0x2f6 <__divsf3_pse+0x2c>
 304:	2b d0       	rcall	.+86     	; 0x35c <__divsf3_pse+0x92>
 306:	fe 2f       	mov	r31, r30
 308:	29 d0       	rcall	.+82     	; 0x35c <__divsf3_pse+0x92>
 30a:	66 0f       	add	r22, r22
 30c:	77 1f       	adc	r23, r23
 30e:	88 1f       	adc	r24, r24
 310:	bb 1f       	adc	r27, r27
 312:	26 17       	cp	r18, r22
 314:	37 07       	cpc	r19, r23
 316:	48 07       	cpc	r20, r24
 318:	ab 07       	cpc	r26, r27
 31a:	b0 e8       	ldi	r27, 0x80	; 128
 31c:	09 f0       	breq	.+2      	; 0x320 <__divsf3_pse+0x56>
 31e:	bb 0b       	sbc	r27, r27
 320:	80 2d       	mov	r24, r0
 322:	bf 01       	movw	r22, r30
 324:	ff 27       	eor	r31, r31
 326:	93 58       	subi	r25, 0x83	; 131
 328:	5f 4f       	sbci	r21, 0xFF	; 255
 32a:	3a f0       	brmi	.+14     	; 0x33a <__divsf3_pse+0x70>
 32c:	9e 3f       	cpi	r25, 0xFE	; 254
 32e:	51 05       	cpc	r21, r1
 330:	78 f0       	brcs	.+30     	; 0x350 <__divsf3_pse+0x86>
 332:	0c 94 33 02 	jmp	0x466	; 0x466 <__fp_inf>
 336:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__fp_szero>
 33a:	5f 3f       	cpi	r21, 0xFF	; 255
 33c:	e4 f3       	brlt	.-8      	; 0x336 <__divsf3_pse+0x6c>
 33e:	98 3e       	cpi	r25, 0xE8	; 232
 340:	d4 f3       	brlt	.-12     	; 0x336 <__divsf3_pse+0x6c>
 342:	86 95       	lsr	r24
 344:	77 95       	ror	r23
 346:	67 95       	ror	r22
 348:	b7 95       	ror	r27
 34a:	f7 95       	ror	r31
 34c:	9f 5f       	subi	r25, 0xFF	; 255
 34e:	c9 f7       	brne	.-14     	; 0x342 <__divsf3_pse+0x78>
 350:	88 0f       	add	r24, r24
 352:	91 1d       	adc	r25, r1
 354:	96 95       	lsr	r25
 356:	87 95       	ror	r24
 358:	97 f9       	bld	r25, 7
 35a:	08 95       	ret
 35c:	e1 e0       	ldi	r30, 0x01	; 1
 35e:	66 0f       	add	r22, r22
 360:	77 1f       	adc	r23, r23
 362:	88 1f       	adc	r24, r24
 364:	bb 1f       	adc	r27, r27
 366:	62 17       	cp	r22, r18
 368:	73 07       	cpc	r23, r19
 36a:	84 07       	cpc	r24, r20
 36c:	ba 07       	cpc	r27, r26
 36e:	20 f0       	brcs	.+8      	; 0x378 <__divsf3_pse+0xae>
 370:	62 1b       	sub	r22, r18
 372:	73 0b       	sbc	r23, r19
 374:	84 0b       	sbc	r24, r20
 376:	ba 0b       	sbc	r27, r26
 378:	ee 1f       	adc	r30, r30
 37a:	88 f7       	brcc	.-30     	; 0x35e <__divsf3_pse+0x94>
 37c:	e0 95       	com	r30
 37e:	08 95       	ret

00000380 <__fixsfsi>:
 380:	0e 94 c7 01 	call	0x38e	; 0x38e <__fixunssfsi>
 384:	68 94       	set
 386:	b1 11       	cpse	r27, r1
 388:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__fp_szero>
 38c:	08 95       	ret

0000038e <__fixunssfsi>:
 38e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__fp_splitA>
 392:	88 f0       	brcs	.+34     	; 0x3b6 <__fixunssfsi+0x28>
 394:	9f 57       	subi	r25, 0x7F	; 127
 396:	98 f0       	brcs	.+38     	; 0x3be <__fixunssfsi+0x30>
 398:	b9 2f       	mov	r27, r25
 39a:	99 27       	eor	r25, r25
 39c:	b7 51       	subi	r27, 0x17	; 23
 39e:	b0 f0       	brcs	.+44     	; 0x3cc <__fixunssfsi+0x3e>
 3a0:	e1 f0       	breq	.+56     	; 0x3da <__fixunssfsi+0x4c>
 3a2:	66 0f       	add	r22, r22
 3a4:	77 1f       	adc	r23, r23
 3a6:	88 1f       	adc	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	1a f0       	brmi	.+6      	; 0x3b2 <__fixunssfsi+0x24>
 3ac:	ba 95       	dec	r27
 3ae:	c9 f7       	brne	.-14     	; 0x3a2 <__fixunssfsi+0x14>
 3b0:	14 c0       	rjmp	.+40     	; 0x3da <__fixunssfsi+0x4c>
 3b2:	b1 30       	cpi	r27, 0x01	; 1
 3b4:	91 f0       	breq	.+36     	; 0x3da <__fixunssfsi+0x4c>
 3b6:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__fp_zero>
 3ba:	b1 e0       	ldi	r27, 0x01	; 1
 3bc:	08 95       	ret
 3be:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__fp_zero>
 3c2:	67 2f       	mov	r22, r23
 3c4:	78 2f       	mov	r23, r24
 3c6:	88 27       	eor	r24, r24
 3c8:	b8 5f       	subi	r27, 0xF8	; 248
 3ca:	39 f0       	breq	.+14     	; 0x3da <__fixunssfsi+0x4c>
 3cc:	b9 3f       	cpi	r27, 0xF9	; 249
 3ce:	cc f3       	brlt	.-14     	; 0x3c2 <__fixunssfsi+0x34>
 3d0:	86 95       	lsr	r24
 3d2:	77 95       	ror	r23
 3d4:	67 95       	ror	r22
 3d6:	b3 95       	inc	r27
 3d8:	d9 f7       	brne	.-10     	; 0x3d0 <__fixunssfsi+0x42>
 3da:	3e f4       	brtc	.+14     	; 0x3ea <__fixunssfsi+0x5c>
 3dc:	90 95       	com	r25
 3de:	80 95       	com	r24
 3e0:	70 95       	com	r23
 3e2:	61 95       	neg	r22
 3e4:	7f 4f       	sbci	r23, 0xFF	; 255
 3e6:	8f 4f       	sbci	r24, 0xFF	; 255
 3e8:	9f 4f       	sbci	r25, 0xFF	; 255
 3ea:	08 95       	ret

000003ec <__floatunsisf>:
 3ec:	e8 94       	clt
 3ee:	09 c0       	rjmp	.+18     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>

000003f0 <__floatsisf>:
 3f0:	97 fb       	bst	r25, 7
 3f2:	3e f4       	brtc	.+14     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3f4:	90 95       	com	r25
 3f6:	80 95       	com	r24
 3f8:	70 95       	com	r23
 3fa:	61 95       	neg	r22
 3fc:	7f 4f       	sbci	r23, 0xFF	; 255
 3fe:	8f 4f       	sbci	r24, 0xFF	; 255
 400:	9f 4f       	sbci	r25, 0xFF	; 255
 402:	99 23       	and	r25, r25
 404:	a9 f0       	breq	.+42     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 406:	f9 2f       	mov	r31, r25
 408:	96 e9       	ldi	r25, 0x96	; 150
 40a:	bb 27       	eor	r27, r27
 40c:	93 95       	inc	r25
 40e:	f6 95       	lsr	r31
 410:	87 95       	ror	r24
 412:	77 95       	ror	r23
 414:	67 95       	ror	r22
 416:	b7 95       	ror	r27
 418:	f1 11       	cpse	r31, r1
 41a:	f8 cf       	rjmp	.-16     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 41c:	fa f4       	brpl	.+62     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 41e:	bb 0f       	add	r27, r27
 420:	11 f4       	brne	.+4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 422:	60 ff       	sbrs	r22, 0
 424:	1b c0       	rjmp	.+54     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 426:	6f 5f       	subi	r22, 0xFF	; 255
 428:	7f 4f       	sbci	r23, 0xFF	; 255
 42a:	8f 4f       	sbci	r24, 0xFF	; 255
 42c:	9f 4f       	sbci	r25, 0xFF	; 255
 42e:	16 c0       	rjmp	.+44     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 430:	88 23       	and	r24, r24
 432:	11 f0       	breq	.+4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 434:	96 e9       	ldi	r25, 0x96	; 150
 436:	11 c0       	rjmp	.+34     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 438:	77 23       	and	r23, r23
 43a:	21 f0       	breq	.+8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 43c:	9e e8       	ldi	r25, 0x8E	; 142
 43e:	87 2f       	mov	r24, r23
 440:	76 2f       	mov	r23, r22
 442:	05 c0       	rjmp	.+10     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 444:	66 23       	and	r22, r22
 446:	71 f0       	breq	.+28     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 448:	96 e8       	ldi	r25, 0x86	; 134
 44a:	86 2f       	mov	r24, r22
 44c:	70 e0       	ldi	r23, 0x00	; 0
 44e:	60 e0       	ldi	r22, 0x00	; 0
 450:	2a f0       	brmi	.+10     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 452:	9a 95       	dec	r25
 454:	66 0f       	add	r22, r22
 456:	77 1f       	adc	r23, r23
 458:	88 1f       	adc	r24, r24
 45a:	da f7       	brpl	.-10     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 45c:	88 0f       	add	r24, r24
 45e:	96 95       	lsr	r25
 460:	87 95       	ror	r24
 462:	97 f9       	bld	r25, 7
 464:	08 95       	ret

00000466 <__fp_inf>:
 466:	97 f9       	bld	r25, 7
 468:	9f 67       	ori	r25, 0x7F	; 127
 46a:	80 e8       	ldi	r24, 0x80	; 128
 46c:	70 e0       	ldi	r23, 0x00	; 0
 46e:	60 e0       	ldi	r22, 0x00	; 0
 470:	08 95       	ret

00000472 <__fp_nan>:
 472:	9f ef       	ldi	r25, 0xFF	; 255
 474:	80 ec       	ldi	r24, 0xC0	; 192
 476:	08 95       	ret

00000478 <__fp_pscA>:
 478:	00 24       	eor	r0, r0
 47a:	0a 94       	dec	r0
 47c:	16 16       	cp	r1, r22
 47e:	17 06       	cpc	r1, r23
 480:	18 06       	cpc	r1, r24
 482:	09 06       	cpc	r0, r25
 484:	08 95       	ret

00000486 <__fp_pscB>:
 486:	00 24       	eor	r0, r0
 488:	0a 94       	dec	r0
 48a:	12 16       	cp	r1, r18
 48c:	13 06       	cpc	r1, r19
 48e:	14 06       	cpc	r1, r20
 490:	05 06       	cpc	r0, r21
 492:	08 95       	ret

00000494 <__fp_round>:
 494:	09 2e       	mov	r0, r25
 496:	03 94       	inc	r0
 498:	00 0c       	add	r0, r0
 49a:	11 f4       	brne	.+4      	; 0x4a0 <__fp_round+0xc>
 49c:	88 23       	and	r24, r24
 49e:	52 f0       	brmi	.+20     	; 0x4b4 <__fp_round+0x20>
 4a0:	bb 0f       	add	r27, r27
 4a2:	40 f4       	brcc	.+16     	; 0x4b4 <__fp_round+0x20>
 4a4:	bf 2b       	or	r27, r31
 4a6:	11 f4       	brne	.+4      	; 0x4ac <__fp_round+0x18>
 4a8:	60 ff       	sbrs	r22, 0
 4aa:	04 c0       	rjmp	.+8      	; 0x4b4 <__fp_round+0x20>
 4ac:	6f 5f       	subi	r22, 0xFF	; 255
 4ae:	7f 4f       	sbci	r23, 0xFF	; 255
 4b0:	8f 4f       	sbci	r24, 0xFF	; 255
 4b2:	9f 4f       	sbci	r25, 0xFF	; 255
 4b4:	08 95       	ret

000004b6 <__fp_split3>:
 4b6:	57 fd       	sbrc	r21, 7
 4b8:	90 58       	subi	r25, 0x80	; 128
 4ba:	44 0f       	add	r20, r20
 4bc:	55 1f       	adc	r21, r21
 4be:	59 f0       	breq	.+22     	; 0x4d6 <__fp_splitA+0x10>
 4c0:	5f 3f       	cpi	r21, 0xFF	; 255
 4c2:	71 f0       	breq	.+28     	; 0x4e0 <__fp_splitA+0x1a>
 4c4:	47 95       	ror	r20

000004c6 <__fp_splitA>:
 4c6:	88 0f       	add	r24, r24
 4c8:	97 fb       	bst	r25, 7
 4ca:	99 1f       	adc	r25, r25
 4cc:	61 f0       	breq	.+24     	; 0x4e6 <__fp_splitA+0x20>
 4ce:	9f 3f       	cpi	r25, 0xFF	; 255
 4d0:	79 f0       	breq	.+30     	; 0x4f0 <__fp_splitA+0x2a>
 4d2:	87 95       	ror	r24
 4d4:	08 95       	ret
 4d6:	12 16       	cp	r1, r18
 4d8:	13 06       	cpc	r1, r19
 4da:	14 06       	cpc	r1, r20
 4dc:	55 1f       	adc	r21, r21
 4de:	f2 cf       	rjmp	.-28     	; 0x4c4 <__fp_split3+0xe>
 4e0:	46 95       	lsr	r20
 4e2:	f1 df       	rcall	.-30     	; 0x4c6 <__fp_splitA>
 4e4:	08 c0       	rjmp	.+16     	; 0x4f6 <__fp_splitA+0x30>
 4e6:	16 16       	cp	r1, r22
 4e8:	17 06       	cpc	r1, r23
 4ea:	18 06       	cpc	r1, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	f1 cf       	rjmp	.-30     	; 0x4d2 <__fp_splitA+0xc>
 4f0:	86 95       	lsr	r24
 4f2:	71 05       	cpc	r23, r1
 4f4:	61 05       	cpc	r22, r1
 4f6:	08 94       	sec
 4f8:	08 95       	ret

000004fa <__fp_zero>:
 4fa:	e8 94       	clt

000004fc <__fp_szero>:
 4fc:	bb 27       	eor	r27, r27
 4fe:	66 27       	eor	r22, r22
 500:	77 27       	eor	r23, r23
 502:	cb 01       	movw	r24, r22
 504:	97 f9       	bld	r25, 7
 506:	08 95       	ret

00000508 <__mulsf3>:
 508:	0e 94 97 02 	call	0x52e	; 0x52e <__mulsf3x>
 50c:	0c 94 4a 02 	jmp	0x494	; 0x494 <__fp_round>
 510:	0e 94 3c 02 	call	0x478	; 0x478 <__fp_pscA>
 514:	38 f0       	brcs	.+14     	; 0x524 <__mulsf3+0x1c>
 516:	0e 94 43 02 	call	0x486	; 0x486 <__fp_pscB>
 51a:	20 f0       	brcs	.+8      	; 0x524 <__mulsf3+0x1c>
 51c:	95 23       	and	r25, r21
 51e:	11 f0       	breq	.+4      	; 0x524 <__mulsf3+0x1c>
 520:	0c 94 33 02 	jmp	0x466	; 0x466 <__fp_inf>
 524:	0c 94 39 02 	jmp	0x472	; 0x472 <__fp_nan>
 528:	11 24       	eor	r1, r1
 52a:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__fp_szero>

0000052e <__mulsf3x>:
 52e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__fp_split3>
 532:	70 f3       	brcs	.-36     	; 0x510 <__mulsf3+0x8>

00000534 <__mulsf3_pse>:
 534:	95 9f       	mul	r25, r21
 536:	c1 f3       	breq	.-16     	; 0x528 <__mulsf3+0x20>
 538:	95 0f       	add	r25, r21
 53a:	50 e0       	ldi	r21, 0x00	; 0
 53c:	55 1f       	adc	r21, r21
 53e:	62 9f       	mul	r22, r18
 540:	f0 01       	movw	r30, r0
 542:	72 9f       	mul	r23, r18
 544:	bb 27       	eor	r27, r27
 546:	f0 0d       	add	r31, r0
 548:	b1 1d       	adc	r27, r1
 54a:	63 9f       	mul	r22, r19
 54c:	aa 27       	eor	r26, r26
 54e:	f0 0d       	add	r31, r0
 550:	b1 1d       	adc	r27, r1
 552:	aa 1f       	adc	r26, r26
 554:	64 9f       	mul	r22, r20
 556:	66 27       	eor	r22, r22
 558:	b0 0d       	add	r27, r0
 55a:	a1 1d       	adc	r26, r1
 55c:	66 1f       	adc	r22, r22
 55e:	82 9f       	mul	r24, r18
 560:	22 27       	eor	r18, r18
 562:	b0 0d       	add	r27, r0
 564:	a1 1d       	adc	r26, r1
 566:	62 1f       	adc	r22, r18
 568:	73 9f       	mul	r23, r19
 56a:	b0 0d       	add	r27, r0
 56c:	a1 1d       	adc	r26, r1
 56e:	62 1f       	adc	r22, r18
 570:	83 9f       	mul	r24, r19
 572:	a0 0d       	add	r26, r0
 574:	61 1d       	adc	r22, r1
 576:	22 1f       	adc	r18, r18
 578:	74 9f       	mul	r23, r20
 57a:	33 27       	eor	r19, r19
 57c:	a0 0d       	add	r26, r0
 57e:	61 1d       	adc	r22, r1
 580:	23 1f       	adc	r18, r19
 582:	84 9f       	mul	r24, r20
 584:	60 0d       	add	r22, r0
 586:	21 1d       	adc	r18, r1
 588:	82 2f       	mov	r24, r18
 58a:	76 2f       	mov	r23, r22
 58c:	6a 2f       	mov	r22, r26
 58e:	11 24       	eor	r1, r1
 590:	9f 57       	subi	r25, 0x7F	; 127
 592:	50 40       	sbci	r21, 0x00	; 0
 594:	9a f0       	brmi	.+38     	; 0x5bc <__mulsf3_pse+0x88>
 596:	f1 f0       	breq	.+60     	; 0x5d4 <__mulsf3_pse+0xa0>
 598:	88 23       	and	r24, r24
 59a:	4a f0       	brmi	.+18     	; 0x5ae <__mulsf3_pse+0x7a>
 59c:	ee 0f       	add	r30, r30
 59e:	ff 1f       	adc	r31, r31
 5a0:	bb 1f       	adc	r27, r27
 5a2:	66 1f       	adc	r22, r22
 5a4:	77 1f       	adc	r23, r23
 5a6:	88 1f       	adc	r24, r24
 5a8:	91 50       	subi	r25, 0x01	; 1
 5aa:	50 40       	sbci	r21, 0x00	; 0
 5ac:	a9 f7       	brne	.-22     	; 0x598 <__mulsf3_pse+0x64>
 5ae:	9e 3f       	cpi	r25, 0xFE	; 254
 5b0:	51 05       	cpc	r21, r1
 5b2:	80 f0       	brcs	.+32     	; 0x5d4 <__mulsf3_pse+0xa0>
 5b4:	0c 94 33 02 	jmp	0x466	; 0x466 <__fp_inf>
 5b8:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__fp_szero>
 5bc:	5f 3f       	cpi	r21, 0xFF	; 255
 5be:	e4 f3       	brlt	.-8      	; 0x5b8 <__mulsf3_pse+0x84>
 5c0:	98 3e       	cpi	r25, 0xE8	; 232
 5c2:	d4 f3       	brlt	.-12     	; 0x5b8 <__mulsf3_pse+0x84>
 5c4:	86 95       	lsr	r24
 5c6:	77 95       	ror	r23
 5c8:	67 95       	ror	r22
 5ca:	b7 95       	ror	r27
 5cc:	f7 95       	ror	r31
 5ce:	e7 95       	ror	r30
 5d0:	9f 5f       	subi	r25, 0xFF	; 255
 5d2:	c1 f7       	brne	.-16     	; 0x5c4 <__mulsf3_pse+0x90>
 5d4:	fe 2b       	or	r31, r30
 5d6:	88 0f       	add	r24, r24
 5d8:	91 1d       	adc	r25, r1
 5da:	96 95       	lsr	r25
 5dc:	87 95       	ror	r24
 5de:	97 f9       	bld	r25, 7
 5e0:	08 95       	ret

000005e2 <__divmodhi4>:
 5e2:	97 fb       	bst	r25, 7
 5e4:	07 2e       	mov	r0, r23
 5e6:	16 f4       	brtc	.+4      	; 0x5ec <__divmodhi4+0xa>
 5e8:	00 94       	com	r0
 5ea:	07 d0       	rcall	.+14     	; 0x5fa <__divmodhi4_neg1>
 5ec:	77 fd       	sbrc	r23, 7
 5ee:	09 d0       	rcall	.+18     	; 0x602 <__divmodhi4_neg2>
 5f0:	0e 94 05 03 	call	0x60a	; 0x60a <__udivmodhi4>
 5f4:	07 fc       	sbrc	r0, 7
 5f6:	05 d0       	rcall	.+10     	; 0x602 <__divmodhi4_neg2>
 5f8:	3e f4       	brtc	.+14     	; 0x608 <__divmodhi4_exit>

000005fa <__divmodhi4_neg1>:
 5fa:	90 95       	com	r25
 5fc:	81 95       	neg	r24
 5fe:	9f 4f       	sbci	r25, 0xFF	; 255
 600:	08 95       	ret

00000602 <__divmodhi4_neg2>:
 602:	70 95       	com	r23
 604:	61 95       	neg	r22
 606:	7f 4f       	sbci	r23, 0xFF	; 255

00000608 <__divmodhi4_exit>:
 608:	08 95       	ret

0000060a <__udivmodhi4>:
 60a:	aa 1b       	sub	r26, r26
 60c:	bb 1b       	sub	r27, r27
 60e:	51 e1       	ldi	r21, 0x11	; 17
 610:	07 c0       	rjmp	.+14     	; 0x620 <__udivmodhi4_ep>

00000612 <__udivmodhi4_loop>:
 612:	aa 1f       	adc	r26, r26
 614:	bb 1f       	adc	r27, r27
 616:	a6 17       	cp	r26, r22
 618:	b7 07       	cpc	r27, r23
 61a:	10 f0       	brcs	.+4      	; 0x620 <__udivmodhi4_ep>
 61c:	a6 1b       	sub	r26, r22
 61e:	b7 0b       	sbc	r27, r23

00000620 <__udivmodhi4_ep>:
 620:	88 1f       	adc	r24, r24
 622:	99 1f       	adc	r25, r25
 624:	5a 95       	dec	r21
 626:	a9 f7       	brne	.-22     	; 0x612 <__udivmodhi4_loop>
 628:	80 95       	com	r24
 62a:	90 95       	com	r25
 62c:	bc 01       	movw	r22, r24
 62e:	cd 01       	movw	r24, r26
 630:	08 95       	ret

00000632 <_exit>:
 632:	f8 94       	cli

00000634 <__stop_program>:
 634:	ff cf       	rjmp	.-2      	; 0x634 <__stop_program>
