
1c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000142  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ee  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000076e  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066d  00000000  00000000  00000942  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ca  00000000  00000000  00000faf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000127c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000386  00000000  00000000  000012a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  00001626  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000016fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 75 00 	jmp	0xea	; 0xea <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define MTR_2 2
#define SW (PINC&(1<<1))

int main()
{
	PORTC |= (1<<1);				//Enable pull-up
  80:	41 9a       	sbi	0x08, 1	; 8
	DDRB |= 0b00000111;				//PB0, PB1, and PB2 as outputs
  82:	84 b1       	in	r24, 0x04	; 4
  84:	87 60       	ori	r24, 0x07	; 7
  86:	84 b9       	out	0x04, r24	; 4
	PORTD &= ~(1<<ENABLE);			//Enable = 0
  88:	5e 98       	cbi	0x0b, 6	; 11
	PORTB &= ~(1<<MTR_1);			//MTR_1 = 0
  8a:	29 98       	cbi	0x05, 1	; 5
	PORTB &= ~(1<<MTR_2);			//MTR_2 = 0
  8c:	2a 98       	cbi	0x05, 2	; 5
	DDRD |= (1<<6);					//OC0A as output
  8e:	56 9a       	sbi	0x0a, 6	; 10
	OCR0A = 50;
  90:	82 e3       	ldi	r24, 0x32	; 50
  92:	87 bd       	out	0x27, r24	; 39
	
									//Fast PWM, non-inverted
	TCCR0A = (1<<COM0A1) | (1<<WGM01) | (1<<WGM00);
  94:	83 e8       	ldi	r24, 0x83	; 131
  96:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x02;					//N = 8
  98:	82 e0       	ldi	r24, 0x02	; 2
  9a:	85 bd       	out	0x25, r24	; 37
			PORTB &= (~(1<<MTR_1));	//MTR_1 = 0
			PORTB &= (~(1<<MTR_2));	//MTR_2 = 0
		}
		_delay_ms(1000);
		if (OCR0A > 250)
			OCR0A = 50;
  9c:	92 e3       	ldi	r25, 0x32	; 50
									//Fast PWM, non-inverted
	TCCR0A = (1<<COM0A1) | (1<<WGM01) | (1<<WGM00);
	TCCR0B = 0x02;					//N = 8
	while(1)
	{
		PORTD |= (1<<ENABLE);		//Enable = 1
  9e:	5e 9a       	sbi	0x0b, 6	; 11
		if(SW != 0)					//if PD7 is high
  a0:	31 9b       	sbis	0x06, 1	; 6
  a2:	09 c0       	rjmp	.+18     	; 0xb6 <main+0x36>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	ef e3       	ldi	r30, 0x3F	; 63
  a6:	fc e9       	ldi	r31, 0x9C	; 156
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <main+0x28>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x2e>
  ae:	00 00       	nop
		{
									//Clockwise Rotation
			_delay_ms(20);
			PORTB |= (1<<MTR_1);	//MTR_1 = 1
  b0:	29 9a       	sbi	0x05, 1	; 5
			PORTB &= (~(1<<MTR_2));	//MTR_2 = 0
  b2:	2a 98       	cbi	0x05, 2	; 5
  b4:	08 c0       	rjmp	.+16     	; 0xc6 <main+0x46>
  b6:	ef e3       	ldi	r30, 0x3F	; 63
  b8:	fc e9       	ldi	r31, 0x9C	; 156
  ba:	31 97       	sbiw	r30, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <main+0x3a>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x40>
  c0:	00 00       	nop
		}
		else
		{
									//Anti-Clockwise Rotation (off)
			_delay_ms(20);
			PORTB &= (~(1<<MTR_1));	//MTR_1 = 0
  c2:	29 98       	cbi	0x05, 1	; 5
			PORTB &= (~(1<<MTR_2));	//MTR_2 = 0
  c4:	2a 98       	cbi	0x05, 2	; 5
  c6:	ff ef       	ldi	r31, 0xFF	; 255
  c8:	29 e6       	ldi	r18, 0x69	; 105
  ca:	38 e1       	ldi	r19, 0x18	; 24
  cc:	f1 50       	subi	r31, 0x01	; 1
  ce:	20 40       	sbci	r18, 0x00	; 0
  d0:	30 40       	sbci	r19, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x4c>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x56>
  d6:	00 00       	nop
		}
		_delay_ms(1000);
		if (OCR0A > 250)
  d8:	87 b5       	in	r24, 0x27	; 39
  da:	8b 3f       	cpi	r24, 0xFB	; 251
  dc:	10 f0       	brcs	.+4      	; 0xe2 <main+0x62>
			OCR0A = 50;
  de:	97 bd       	out	0x27, r25	; 39
  e0:	de cf       	rjmp	.-68     	; 0x9e <main+0x1e>
		else
			OCR0A = OCR0A + 25;
  e2:	87 b5       	in	r24, 0x27	; 39
  e4:	87 5e       	subi	r24, 0xE7	; 231
  e6:	87 bd       	out	0x27, r24	; 39
  e8:	da cf       	rjmp	.-76     	; 0x9e <main+0x1e>

000000ea <_exit>:
  ea:	f8 94       	cli

000000ec <__stop_program>:
  ec:	ff cf       	rjmp	.-2      	; 0xec <__stop_program>
